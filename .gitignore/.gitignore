/*CONSOLE TRAINER AssaultCube */

#include "stdafx.h"
#include <iostream>
#include <Windows.h>
#include <string>
#include <ctime>

void WriteToMemory(HANDLE hProcHandle);
DWORD FindDmAddy(int PointerLevel, HANDLE hProcHandle, DWORD Offsets[], DWORD BaseAddress);


std::string GameName = "AssaultCube";
LPCSTR LGameWindow = "AssaultCube";
std::string GameStatus;

bool IsGameAvail;
bool UpdateOnNextRun;

// AMMO VARS
bool AmmoStatus;
BYTE AmmoValue[] = { 0xA3, 0x1c, 0x0, 0x0, };
DWORD AmmoBaseAddress = { 0x00509B74 };
DWORD AmmoOffsets[] = { 0x384, 0x14, 0x0 };

// Health  VARS
bool HealthStatus;
BYTE HealthValue[] = { 0x39, 0x5, 0x0, 0x0, };
DWORD HealthBaseAddress = { 0x00509B74 };
DWORD HealthOffsets[] = { 0xF8 };

int main()
{
	HWND hGameWindow = NULL;
	int timeSinceLastUpdate = clock();
	int GameAvailTMR = clock();
	int OnePressTMR = NULL;
	DWORD dwProcID = NULL;
	HANDLE hProcHandle = NULL;
	UpdateOnNextRun = true;
	std::string sAmmoStatus;
	std::string sHealthStatus;
	sAmmoStatus = "OFF";
	sHealthStatus = "OFF";
	OnePressTMR = clock();

	while (!GetAsyncKeyState(VK_INSERT))
	{

		if (clock() - GameAvailTMR > 100)
		{
			GameAvailTMR = clock();
			IsGameAvail = false;

			hGameWindow = FindWindow(NULL, LGameWindow);
			if (hGameWindow)
			{
				GetWindowThreadProcessId(hGameWindow, &dwProcID);
				if (dwProcID != 0)
				{
					hProcHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcID);
					if (hProcHandle == INVALID_HANDLE_VALUE || hProcHandle == NULL)
					{
						GameStatus = "Failed to open process for valid handle";
					}
					else
					{
						GameStatus = "AssaultCube Ready to hack";
						IsGameAvail = true;
					}
				}
				else GameStatus = "Failed to obtain process id";
			}
			else GameStatus = "AssaultCube NOT FOUND";


			if (UpdateOnNextRun || clock() - timeSinceLastUpdate > 5000)
			{
				system("cls");
				std::cout << "------------------------------------" << std::endl;
				std::cout << "AssaultCube memory hacker" << std::endl;
				std::cout << "------------------------------------" << std::endl;
				std::cout << "Game Status" << std::endl << std::endl;
				std::cout << "[F1] Unlimited Ammo ->" << sAmmoStatus << "<-" << std::endl << std::endl;
				std::cout << "[F2] Unlimited Health ->" << sHealthStatus << "<-" << std::endl << std::endl;
				std::cout << "[Insert] Exit the trainer" << std::endl << std::endl;

				UpdateOnNextRun = false;
				timeSinceLastUpdate = clock();
			}
			if (IsGameAvail)
			{
				WriteToMemory(hProcHandle);
			}
		}
		if (clock() - OnePressTMR > 400)
		{
			if (IsGameAvail)
			{
				// Ammo
				if (GetAsyncKeyState(VK_F1))
				{
					OnePressTMR = clock();
					AmmoStatus = !AmmoStatus;
					UpdateOnNextRun = true;
					if (AmmoStatus)sAmmoStatus = "ON";
					else sAmmoStatus = "OFF";
				}
				//Health
				else if (GetAsyncKeyState(VK_F2))
				{
					OnePressTMR = clock();
					HealthStatus = !HealthStatus;
					UpdateOnNextRun = true;
					if (HealthStatus)sAmmoStatus = "ON";
					else sHealthStatus = "OFF";
				}

			}
		}

	}


	return ERROR_SUCCESS;



}



DWORD FindDmAddy(int PointerLevel, HANDLE hProcHandle, DWORD Offsets[], DWORD BaseAdress)
{
	DWORD pointer = BaseAdress;
	DWORD pTemp;

	DWORD pointerAddr;
	for (int i = 0; i < PointerLevel; i++)
	{
		if (i == 0)
		{
			ReadProcessMemory(hProcHandle, (LPCVOID)pointer, &pTemp, 4, NULL);
		}
		pointerAddr = pTemp + Offsets[i];

		ReadProcessMemory(hProcHandle, (LPCVOID)pointer, &pTemp, 4, NULL);
	}
	return pointerAddr;

}


void WriteToMemory(HANDLE hProcHandle)
{
	DWORD AdressToWrite;
	if (AmmoStatus)
	{
		AdressToWrite = FindDmAddy(3, hProcHandle, AmmoOffsets, AmmoBaseAddress);
		WriteProcessMemory(hProcHandle, (BYTE*)AdressToWrite, &AmmoValue, sizeof(AmmoValue), NULL);
	}
	if (HealthStatus)
	{
		AdressToWrite = FindDmAddy(3, hProcHandle, HealthOffsets, HealthBaseAddress);
		WriteProcessMemory(hProcHandle, (BYTE*)AdressToWrite, &HealthValue, sizeof(HealthValue), NULL);
	}
}
